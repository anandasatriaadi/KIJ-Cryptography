#include <bits/stdc++.h>
using namespace std;

#define DEBUG true
#define _(x) if (DEBUG){cout << #x << " = [" << x << "]" << endl;}
#define __(x) if (DEBUG){cout << #x << " = " << x << " ";}
#define println(x) if (DEBUG){cout << x << endl;}
#define print(x) if (DEBUG){cout << x;}
#define mod %
/*
    SOURCES :: https://ariesta.club/files/KIJ/04%20-%20AES%20Decryption%20n%20Stream%20Cipher.pdf
*/
class RC4 {
    private:
        uint LEN = 256;
        uint KEY_LEN = 128;
        uint S[256];
        unsigned char T[256];
        const unsigned char KEY[128] = {0x51, 0x3c, 0x3a, 0x37, 0x38, 0x1d, 0xa4, 0x8c, 0xf8, 0x8a, 0x3a, 0x14, 0xb5, 0x69, 0xfa, 0x79, 0x29, 0xc2, 0xe6, 0xc4, 0x49, 0x4e, 0x74, 0xa2, 0x67, 0x41, 0x7b, 0x8a, 0xf8, 0xb7, 0x21, 0xfd, 0x1d, 0xea, 0x78, 0xd3, 0xd2, 0x11, 0xe0, 0x53, 0xd0, 0xca, 0x55, 0x47, 0x35, 0xc2, 0xad, 0xbe, 0xba, 0xe1, 0x41, 0x9d, 0x3e, 0xa6, 0xc8, 0xa6, 0xa7, 0xf5, 0xab, 0xba, 0x83, 0xb2, 0xb6, 0xd1, 0x4a, 0xb3, 0x24, 0x18, 0xbb, 0x32, 0xe6, 0x77, 0x18, 0xdc, 0x0c, 0x5b, 0x6c, 0xf6, 0xce, 0x45, 0x57, 0x9a, 0x00, 0x9a, 0x4f, 0x7b, 0x6c, 0x03, 0x5a, 0x6f, 0x0d, 0x97, 0x07, 0x70, 0x7b, 0x93, 0x1a, 0xa9, 0x5f, 0x5a, 0x5d, 0xa1, 0x01, 0x74, 0x8d, 0x8c, 0x63, 0x06, 0x15, 0x0b, 0x7e, 0x7f, 0x3c, 0xd2, 0x7b, 0xe6, 0x89, 0xcb, 0xbf, 0x70, 0x47, 0x7b, 0x13, 0xba, 0x35, 0x02, 0x73, 0x26};
    public:
        explicit RC4();
        void encrypt(unsigned char plainText[], unsigned char cipherText[], uint dataLen);
};

RC4::RC4(){
    // Initialisation
    for (uint i = 0; i < LEN; i++){
        S[i] = i;
        T[i] = KEY[i mod KEY_LEN];
    }
    
    // Init permutation
    uint j = 0;
    for (uint i = 0; i < LEN; i++) {
        j = (j + S[i] + T[i]) mod LEN;
        swap(S[i], S[j]);
    }
}

void RC4::encrypt(unsigned char plainText[], unsigned char cipherText[], uint dataLen){
    uint i=0,j=0;
    for (uint idx = 0; idx < dataLen; idx++){
        i = (i+1) mod LEN;
        j = (j+S[i]) mod LEN;
        swap(S[i], S[j]);

        uint t = (S[i] + S[j]) mod LEN;

        cipherText[idx] = S[t] ^ plainText[idx];
    }
}